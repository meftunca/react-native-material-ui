{"version":3,"sources":["useDeviceOrientation.ts"],"names":["useEffect","useState","Dimensions","screen","get","isOrientationPortrait","width","height","isOrientationLandscape","portrait","landscape","orientation","setOrientation","onChange","addEventListener","removeEventListener"],"mappings":"iEAAA,OAAgBA,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,UAAT,KAAuC,cAAvC,CAEA,GAAMC,CAAAA,MAAM,CAAGD,UAAU,CAACE,GAAX,CAAe,QAAf,CAAf,CAEA,cAAe,WAAW,CACxB,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,UAC5BC,CAAAA,KAD4B,MAC5BA,KAD4B,CAE5BC,MAF4B,MAE5BA,MAF4B,OAMxBA,CAAAA,MAAM,EAAID,KANc,EAA9B,CAOA,GAAME,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,WAC7BF,CAAAA,KAD6B,OAC7BA,KAD6B,CAE7BC,MAF6B,OAE7BA,MAF6B,OAMzBD,CAAAA,KAAK,EAAIC,MANgB,EAA/B,CARwB,cAgBcN,QAAQ,CAAC,CAC7CQ,QAAQ,CAAEJ,qBAAqB,CAACF,MAAD,CADc,CAE7CO,SAAS,CAAEF,sBAAsB,CAACL,MAAD,CAFY,CAAD,CAhBtB,wCAgBjBQ,WAhBiB,eAgBJC,cAhBI,eAqBxB,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,OAAwC,IAArCV,CAAAA,MAAqC,OAArCA,MAAqC,CACvDS,cAAc,CAAC,CACbH,QAAQ,CAAEJ,qBAAqB,CAACF,MAAD,CADlB,CAEbO,SAAS,CAAEF,sBAAsB,CAACL,MAAD,CAFpB,CAAD,CAAd,CAID,CALD,CAOAH,SAAS,CAAC,UAAM,CACdE,UAAU,CAACY,gBAAX,CAA4B,QAA5B,CAAsCD,QAAtC,EAEA,MAAO,WAAM,CACXX,UAAU,CAACa,mBAAX,CAA+B,QAA/B,CAAyCF,QAAzC,EACD,CAFD,CAGD,CANQ,CAMN,CAACF,WAAW,CAACF,QAAb,CAAuBE,WAAW,CAACD,SAAnC,CANM,CAAT,CAQA,MAAOC,CAAAA,WAAP,CACD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Dimensions, ScaledSize } from 'react-native'\n\nconst screen = Dimensions.get('screen')\n\nexport default function() {\n  const isOrientationPortrait = ({\n    width,\n    height,\n  }: {\n    width: number\n    height: number\n  }) => height >= width\n  const isOrientationLandscape = ({\n    width,\n    height,\n  }: {\n    width: number\n    height: number\n  }) => width >= height\n\n  const [orientation, setOrientation] = useState({\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen),\n  })\n\n  const onChange = ({ screen }: { screen: ScaledSize }) => {\n    setOrientation({\n      portrait: isOrientationPortrait(screen),\n      landscape: isOrientationLandscape(screen),\n    })\n  }\n\n  useEffect(() => {\n    Dimensions.addEventListener('change', onChange)\n\n    return () => {\n      Dimensions.removeEventListener('change', onChange)\n    }\n  }, [orientation.portrait, orientation.landscape])\n\n  return orientation\n}\n"]}