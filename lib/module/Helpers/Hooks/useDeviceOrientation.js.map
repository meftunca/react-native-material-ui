{"version":3,"sources":["useDeviceOrientation.tsx"],"names":["useEffect","useState","Dimensions","screen","get","useDeviceOrientation","isOrientationPortrait","width","height","isOrientationLandscape","portrait","landscape","orientation","setOrientation","onChange","addEventListener","removeEventListener"],"mappings":"iEAAA,OAAQA,SAAR,CAAmBC,QAAnB,KAAkC,OAAlC,CACA,OAAQC,UAAR,KAAqC,cAArC,CAEA,GAAMC,CAAAA,MAAM,CAAGD,UAAU,CAACE,GAAX,CAAe,QAAf,CAAf,CAEA,cAAe,SAASC,CAAAA,oBAAT,EAAgC,CAC7C,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,UAC5BC,CAAAA,KAD4B,MAC5BA,KAD4B,CAE5BC,MAF4B,MAE5BA,MAF4B,OAMxBA,CAAAA,MAAM,EAAID,KANc,EAA9B,CAOA,GAAME,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,WAC7BF,CAAAA,KAD6B,OAC7BA,KAD6B,CAE7BC,MAF6B,OAE7BA,MAF6B,OAMzBD,CAAAA,KAAK,EAAIC,MANgB,EAA/B,CAR6C,cAgBPP,QAAQ,CAAC,CAC7CS,QAAQ,CAAEJ,qBAAqB,CAACH,MAAD,CADc,CAE7CQ,SAAS,CAAEF,sBAAsB,CAACN,MAAD,CAFY,CAAD,CAhBD,wCAgBtCS,WAhBsC,eAgBzBC,cAhByB,eAqB7C,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,OAAoC,IAAlCX,CAAAA,MAAkC,OAAlCA,MAAkC,CACnDU,cAAc,CAAC,CACbH,QAAQ,CAAEJ,qBAAqB,CAACH,MAAD,CADlB,CAEbQ,SAAS,CAAEF,sBAAsB,CAACN,MAAD,CAFpB,CAAD,CAAd,CAID,CALD,CAOAH,SAAS,CAAC,UAAM,CACdE,UAAU,CAACa,gBAAX,CAA4B,QAA5B,CAAsCD,QAAtC,EAEA,MAAO,WAAM,CACXZ,UAAU,CAACc,mBAAX,CAA+B,QAA/B,CAAyCF,QAAzC,EACD,CAFD,CAGD,CANQ,CAMN,CAACF,WAAW,CAACF,QAAb,CAAuBE,WAAW,CAACD,SAAnC,CANM,CAAT,CAQA,MAAOC,CAAAA,WAAP,CACD","sourcesContent":["import {useEffect, useState} from 'react';\nimport {Dimensions, ScaledSize} from 'react-native';\n\nconst screen = Dimensions.get('screen');\n\nexport default function useDeviceOrientation() {\n  const isOrientationPortrait = ({\n    width,\n    height,\n  }: {\n    width: number;\n    height: number;\n  }) => height >= width;\n  const isOrientationLandscape = ({\n    width,\n    height,\n  }: {\n    width: number;\n    height: number;\n  }) => width >= height;\n\n  const [orientation, setOrientation] = useState({\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen),\n  });\n\n  const onChange = ({screen}: {screen: ScaledSize}) => {\n    setOrientation({\n      portrait: isOrientationPortrait(screen),\n      landscape: isOrientationLandscape(screen),\n    });\n  };\n\n  useEffect(() => {\n    Dimensions.addEventListener('change', onChange);\n\n    return () => {\n      Dimensions.removeEventListener('change', onChange);\n    };\n  }, [orientation.portrait, orientation.landscape]);\n\n  return orientation;\n}\n"]}