{"version":3,"sources":["useAnimation.ts"],"names":["useRef","useEffect","Animated","useAnimatedValue","initialValue","ref","Value","current","getInitialValue","config","toValue","getAnimationType","type","useAnimation","animatedValue","animate","timing","start","spring","Error"],"mappings":"AAAA,OAAeA,MAAf,CAAuBC,SAAvB,KAAuC,OAAvC,CACA,OAAQC,QAAR,KAAuB,cAAvB,CAQA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,YAAD,CAA0C,CACxE,GAAMC,CAAAA,GAAG,CAAGL,MAAM,CAAC,GAAIE,CAAAA,QAAQ,CAACI,KAAb,CAAmBF,YAAnB,CAAD,CAAlB,CACA,MAAOC,CAAAA,GAAG,CAACE,OAAX,CACD,CAHM,CAoBP,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,MAAD,CAAgC,CACtD,GAAI,MAAOA,CAAAA,MAAM,CAACL,YAAd,GAA+B,WAAnC,CAAgD,MAAOK,CAAAA,MAAM,CAACL,YAAd,CAAhD,IACK,CACH,MAAOK,CAAAA,MAAM,CAACC,OAAd,CACD,CACF,CALD,CAOA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACF,MAAD,QACvBA,CAAAA,MAAM,CAACG,IAAP,EAAe,QADQ,EAAzB,CAGA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACJ,MAAD,CAAgD,CAC1E,GAAMK,CAAAA,aAAa,CAAGX,gBAAgB,CAACK,eAAe,CAACC,MAAD,CAAhB,CAAtC,CAEA,GAAMM,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,GAAIN,MAAM,CAACG,IAAP,GAAgB,QAApB,CAA8B,CAC5BV,QAAQ,CAACc,MAAT,CAAgBF,aAAhB,CAA+BL,MAA/B,EAAuCQ,KAAvC,GACD,CAFD,IAEO,IAAIR,MAAM,CAACG,IAAP,GAAgB,QAApB,CAA8B,CACnCV,QAAQ,CAACgB,MAAT,CAAgBJ,aAAhB,CAA+BL,MAA/B,EAAuCQ,KAAvC,GACD,CAFM,IAEA,CAEL,KAAM,IAAIE,CAAAA,KAAJ,CAAU,8BAAgCV,MAAM,CAACG,IAAjD,CAAN,CACD,CACF,CATD,CAYAX,SAAS,CAACc,OAAD,CAAU,CAACN,MAAM,CAACC,OAAR,CAAV,CAAT,CAEA,MAAOI,CAAAA,aAAP,CACD,CAlBM","sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport {Animated} from 'react-native';\n\ntype ToValue =\n  | number\n  | Animated.AnimatedValue\n  | {x: number; y: number}\n  | Animated.AnimatedValueXY;\n\nexport const useAnimatedValue = (initialValue: number): Animated.Value => {\n  const ref = useRef(new Animated.Value(initialValue));\n  return ref.current;\n};\n\ntype AnimationType = 'spring' | 'timing';\n\ninterface BaseAnimationConfig {\n  initialValue?: number;\n  type?: AnimationType;\n}\n\nexport type TimingAnimationConfig = BaseAnimationConfig &\n  ({type: 'timing'} & Animated.TimingAnimationConfig);\n\nexport type SpringAnimationConfig = BaseAnimationConfig &\n  ({type: 'spring'} & Animated.SpringAnimationConfig);\n\nexport type UseAnimationConfig = TimingAnimationConfig | SpringAnimationConfig;\n\nconst getInitialValue = (config: UseAnimationConfig) => {\n  if (typeof config.initialValue !== 'undefined') return config.initialValue;\n  else {\n    return config.toValue as number; // TODO deal with other types possibilities here\n  }\n};\n\nconst getAnimationType = (config: UseAnimationConfig) =>\n  config.type || 'timing';\n\nexport const useAnimation = (config: UseAnimationConfig): Animated.Value => {\n  const animatedValue = useAnimatedValue(getInitialValue(config));\n\n  const animate = () => {\n    if (config.type === 'timing') {\n      Animated.timing(animatedValue, config).start();\n    } else if (config.type === 'spring') {\n      Animated.spring(animatedValue, config).start();\n    } else {\n      // @ts-ignore\n      throw new Error('unsupported animation type=' + config.type);\n    }\n  };\n\n  // Currently useEffect is buggy, see https://github.com/facebook/react-native/issues/21967\n  useEffect(animate, [config.toValue]);\n\n  return animatedValue;\n};\n"]}