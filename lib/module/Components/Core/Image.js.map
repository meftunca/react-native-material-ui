{"version":3,"sources":["Image.tsx"],"names":["React","useState","useEffect","Image","ImageComp","Dimensions","style","source","get","phoneWidth","width","phoneHeight","height","setPhoneWidth","defImage","setDefImage","size","setSize","widthListener","screen","calculateImage","ratio","console","log","addEventListener","getSize","uri","w","h","removeEventListener","backgroundColor"],"mappings":"ogCAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CAEA,OACEC,KAAK,GAAIC,CAAAA,SADX,CAEEC,UAFF,KAKO,cALP,CAcA,GAAMF,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAA2C,IAAzCG,CAAAA,KAAyC,MAAzCA,KAAyC,CAAlCC,MAAkC,MAAlCA,MAAkC,eACWN,QAAQ,CACxEI,UAAU,CAACG,GAAX,CAAe,QAAf,CADwE,CADnB,kEACxCC,UADwC,aAC/CC,KAD+C,CACpBC,WADoB,aAC5BC,MAD4B,CACNC,aADM,8BAIvBZ,QAAQ,CAAkC,CACxES,KAAK,CAAE,CADiE,CAExEE,MAAM,CAAE,CAFgE,CAAlC,CAJe,yCAIhDE,QAJgD,eAItCC,WAJsC,8BAQ/Bd,QAAQ,CAAkC,CAChES,KAAK,CAAE,CADyD,CAEhEE,MAAM,CAAE,CAFwD,CAAlC,CARuB,yCAQhDI,IARgD,eAQ1CC,OAR0C,eAYvD,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,OAAmB,IAAjBC,CAAAA,MAAiB,OAAjBA,MAAiB,CACvCN,aAAa,CAACM,MAAM,CAACT,KAAR,CAAb,CACD,CAFD,CAGA,GAAMU,CAAAA,cAAmB,CAAG,QAAtBA,CAAAA,cAAsB,EAAM,CAChC,GAAIC,CAAAA,KAAK,CAAGZ,UAAU,CAAGK,QAAQ,CAACJ,KAAlC,CACAO,OAAO,CAAC,CACNP,KAAK,CAAED,UADD,CAENG,MAAM,CAAED,WAAW,CAAGU,KAFhB,CAAD,CAAP,CAIAC,OAAO,CAACC,GAAR,CAAY,CACVb,KAAK,CAAEI,QAAQ,CAACJ,KADN,CAEVD,UAAU,CAAEA,UAFF,CAAZ,EAID,CAVD,CAWAP,SAAS,CAAC,UAAM,CACdG,UAAU,CAACmB,gBAAX,CAA4B,QAA5B,CAAsCN,aAAtC,EACAd,SAAS,CAACqB,OAAV,CACElB,MAAM,CAACmB,GAAP,CAAanB,MAAM,CAACmB,GAApB,CAA0BnB,MAD5B,CAEE,SAACoB,CAAD,CAAIC,CAAJ,CAAU,CACRb,WAAW,kBAAKD,QAAL,EAAeJ,KAAK,CAAEiB,CAAtB,CAAyBf,MAAM,CAAEgB,CAAjC,GAAX,CACAR,cAAc,GACf,CALH,CAME,UAAM,CAAE,CANV,EAQA,MAAO,kBAAMf,CAAAA,UAAU,CAACwB,mBAAX,CAA+B,QAA/B,CAAyCX,aAAzC,CAAN,EAAP,CACD,CAXQ,CAWN,EAXM,CAAT,CAYAhB,SAAS,CAAC,UAAM,CACdkB,cAAc,GACf,CAFQ,CAEN,CAACX,UAAD,CAFM,CAAT,CAGA,MACEO,CAAAA,IAAI,CAACN,KAAL,CAAa,CAAb,EACE,oBAAC,SAAD,EACE,MAAM,CAAEH,MADV,CAEE,KAAK,CAAE,CAACD,KAAD,CAAQU,IAAR,CAAc,CAACc,eAAe,CAAE,OAAlB,CAAd,CAFT,CAGE,UAAU,CAAC,OAHb,CAIE,YAAY,CAAC,MAJf,iDAFJ,CAUD,CAnDD,CAqDA,cAAe3B,CAAAA,KAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport {\n  Image as ImageComp,\n  Dimensions,\n  ImageSourcePropType,\n  ImageStyle,\n} from 'react-native';\n\ntype ImageCustomPropsBase = {\n  source: any;\n\n  style?: ImageStyle;\n  width?: number;\n  ratio?: '1:1' | '4:3' | '1:1.91';\n};\nconst Image = ({style, source}: ImageCustomPropsBase) => {\n  const [{width: phoneWidth, height: phoneHeight}, setPhoneWidth] = useState(\n    Dimensions.get('screen'),\n  );\n  const [defImage, setDefImage] = useState<{width: number; height: number}>({\n    width: 1,\n    height: 1,\n  });\n  const [size, setSize] = useState<{width: number; height: number}>({\n    width: 1,\n    height: 1,\n  });\n  const widthListener = ({screen}: any) => {\n    setPhoneWidth(screen.width);\n  };\n  const calculateImage: any = () => {\n    let ratio = phoneWidth / defImage.width;\n    setSize({\n      width: phoneWidth,\n      height: phoneHeight / ratio,\n    });\n    console.log({\n      width: defImage.width,\n      phoneWidth: phoneWidth,\n    });\n  };\n  useEffect(() => {\n    Dimensions.addEventListener('change', widthListener);\n    ImageComp.getSize(\n      source.uri ? source.uri : source,\n      (w, h) => {\n        setDefImage({...defImage, width: w, height: h});\n        calculateImage();\n      },\n      () => {},\n    );\n    return () => Dimensions.removeEventListener('change', widthListener);\n  }, []);\n  useEffect(() => {\n    calculateImage();\n  }, [phoneWidth]);\n  return (\n    size.width > 1 && (\n      <ImageComp\n        source={source}\n        style={[style, size, {backgroundColor: 'black'}]}\n        resizeMode=\"cover\"\n        resizeMethod=\"auto\"\n      />\n    )\n  );\n};\n\nexport default Image;\n"]}