{"version":3,"sources":["Typography.tsx"],"names":["React","Text","TextBase","PixelRatio","Platform","Animated","Color","withTheme","AnimatedText","createAnimatedComponent","Typography","props","variant","children","style","weight","letterSpacing","theme","gutterBottom","contrast","dense","align","transform","color","rest","themes","typography","marginBottom","fontFamily","select","android","ios","fontSize","fontSizes","getFontScale","alpha","contrasts","toString","fontWeight","fontWeights","letterSpacings","textAlign","textTransform","PureComponent"],"mappings":"skBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACEC,IAAI,GAAIC,CAAAA,QADV,CAGEC,UAHF,CAIEC,QAJF,CAKEC,QALF,KAMO,cANP,CAOA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,SAAR,KAAoC,SAApC,CACA,GAAMC,CAAAA,YAAY,CAAGH,QAAQ,CAACI,uBAAT,CAAiCP,QAAjC,CAArB,C,GAgFMQ,CAAAA,U,2RACK,iBAeH,KAAKC,KAfF,iCAELC,OAFK,CAELA,OAFK,8BAEK,OAFL,qBAGLC,QAHK,aAGLA,QAHK,CAILC,KAJK,aAILA,KAJK,CAKLC,MALK,aAKLA,MALK,CAMLC,aANK,aAMLA,aANK,CAOLC,KAPK,aAOLA,KAPK,CAQLC,YARK,aAQLA,YARK,kCASLC,QATK,CASLA,QATK,+BASM,IATN,oDAULC,KAVK,CAULA,KAVK,4BAUG,KAVH,iDAWLC,KAXK,CAWLA,KAXK,4BAWG,MAXH,qDAYLC,SAZK,CAYLA,SAZK,gCAYO,MAZP,qDAaLC,KAbK,CAaLA,KAbK,4BAaG,SAbH,mBAcFC,IAdE,qKAgBP,GAAMC,CAAAA,MAAM,CAAGR,KAAH,cAAGA,KAAK,CAAES,UAAtB,CACA,MACE,qBAAC,YAAD,aACMF,IADN,EAEE,KAAK,CAAE,CACL,CACEG,YAAY,CAAET,YAAY,EAAI,CADhC,CAEEU,UAAU,CAAExB,QAAQ,CAACyB,MAAT,CAAgB,CAACC,OAAO,CAAE,QAAV,CAAoBC,GAAG,CAAE,QAAzB,CAAhB,CAFd,CAGEC,QAAQ,CACN,CAAC,CAAAP,MAAM,MAAN,QAAAA,MAAM,CAAEQ,SAAR,CAAkBrB,OAAlB,IAA8B,EAA/B,EAAqCT,UAAU,CAAC+B,YAAX,EAArC,EACCd,KAAK,CAAG,CAAH,CAAO,CADb,CAJJ,CAMEG,KAAK,CAAEJ,QAAQ,CACXb,KAAK,CAACiB,KAAD,CAAL,CACGY,KADH,CAEI,MAAOhB,CAAAA,QAAP,GAAoB,QAApB,CACIA,QADJ,CAEI,CAAAM,MAAM,MAAN,QAAAA,MAAM,CAAEW,SAAR,CAAkBxB,OAAlB,IAA8B,CAJtC,EAMGyB,QANH,EADW,CAQXd,KAdN,CAeEe,UAAU,CAAEvB,MAAM,GAAIU,MAAJ,cAAIA,MAAM,CAAEc,WAAR,CAAoB3B,OAApB,CAAJ,CAfpB,CAgBEI,aAAa,CAAEA,aAAa,GAAIS,MAAJ,cAAIA,MAAM,CAAEe,cAAR,CAAuB5B,OAAvB,CAAJ,CAhB9B,CAkBE6B,SAAS,CAAEpB,KAlBb,CAmBEqB,aAAa,CAAEpB,SAnBjB,CADK,CAsBLR,KAtBK,CAFT,mDA0BGD,QA1BH,CADF,CA8BD,C,wBAhDsBb,KAAK,CAAC2C,a,EAmD/B,cAAepC,CAAAA,SAAS,CAACG,UAAD,CAAxB","sourcesContent":["import React from 'react';\nimport {\n  Text as TextBase,\n  TextProps as TextBaseProps,\n  PixelRatio,\n  Platform,\n  Animated,\n} from 'react-native';\nimport Color from 'color';\nimport {withTheme, ThemeTypes} from 'Theming';\nconst AnimatedText = Animated.createAnimatedComponent(TextBase);\nexport interface TextProps extends React.ComponentProps<typeof TextBase> {\n  weight?:\n    | '100'\n    | '200'\n    | '300'\n    | '400'\n    | '500'\n    | '600'\n    | '700'\n    | '800'\n    | '900'\n    | 'bold';\n  variant?:\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6'\n    | 'subtitle1'\n    | 'subtitle2'\n    | 'body1'\n    | 'body2'\n    | 'caption'\n    | 'button'\n    | 'overline';\n  color?: 'primary' | 'secondary' | string;\n  contrast?: number | boolean;\n  dense?: boolean;\n  gutterBottom?: number;\n  letterSpacing?: number;\n  children?: any;\n  align?: 'center' | 'left' | 'right' | 'justify';\n  transform?: 'uppercase' | 'lowercase' | 'capitalize' | 'none';\n  theme: ThemeTypes;\n}\n// const Text: React.FC<TextProps> = ({\n//   variant = 'body1',\n//   children,\n//   style,\n//   weight,\n//   letterSpacing,\n//   gutterBottom,\n//   contrast = true,\n//   dense = false,\n//   align = 'left',\n//   transform = 'none',\n//   color = '#000000',\n//   ...rest\n// }) => {\n//   return (\n//     <TextBase\n//       {...rest}\n//       style={[\n//         {\n//           marginBottom: gutterBottom || 0,\n//           fontFamily: Platform.select({android: 'Roboto', ios: 'System'}),\n//           fontSize:\n//             fontSizes[variant] / PixelRatio.getFontScale() - (dense ? 2 : 0),\n//           color: contrast\n//             ? Color(color)\n//                 .alpha(\n//                   typeof contrast === 'number' ? contrast : contrasts[variant],\n//                 )\n//                 .toString()\n//             : color,\n//           fontWeight: weight || fontWeights[variant],\n//           letterSpacing: letterSpacing || letterSpacingsList[variant],\n//           // lineHeight: lineHeights[variant],\n//           textAlign: align,\n//           textTransform: transform,\n//         },\n//         style,\n//       ]}>\n//       {children}\n//     </TextBase>\n//   );\n// };\n\nclass Typography extends React.PureComponent<TextProps> {\n  render() {\n    const {\n      variant = 'body1',\n      children,\n      style,\n      weight,\n      letterSpacing,\n      theme,\n      gutterBottom,\n      contrast = true,\n      dense = false,\n      align = 'left',\n      transform = 'none',\n      color = '#000000',\n      ...rest\n    } = this.props;\n    const themes = theme?.typography;\n    return (\n      <AnimatedText\n        {...rest}\n        style={[\n          {\n            marginBottom: gutterBottom || 0,\n            fontFamily: Platform.select({android: 'Roboto', ios: 'System'}),\n            fontSize:\n              (themes?.fontSizes[variant] || 14) / PixelRatio.getFontScale() -\n              (dense ? 2 : 0),\n            color: contrast\n              ? Color(color)\n                  .alpha(\n                    typeof contrast === 'number'\n                      ? contrast\n                      : themes?.contrasts[variant] || 0,\n                  )\n                  .toString()\n              : color,\n            fontWeight: weight || themes?.fontWeights[variant],\n            letterSpacing: letterSpacing || themes?.letterSpacings[variant],\n            // lineHeight: lineHeights[variant],\n            textAlign: align,\n            textTransform: transform,\n          },\n          style,\n        ]}>\n        {children}\n      </AnimatedText>\n    );\n  }\n}\n\nexport default withTheme(Typography);\n"]}