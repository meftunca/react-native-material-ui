{"version":3,"sources":["BottomNavigation.tsx"],"names":["React","Fragment","useState","useEffect","useRef","Animated","Easing","StyleSheet","View","Icon","Palette","Ripple","Text","Transitioning","Transition","SafeAreaView","transition","BottomNavigation","config","actions","scenes","color","secondary","onChangeScene","ref","state","setState","initialScene","sceneKey","ActiveSceneKey","setActiveSceneKey","handleChange","key","current","animateNextTransition","flex","width","height","padding","backgroundColor","map","k","Scene","styles","paper","amber600","blue600","i","content","create","minHeight","flexDirection","alignContent","alignItems","flexGrow","action","minWidth","maxWidth","marginTop","marginBottom","paddingHorizontal","justifyContent","text","fontSize","fontWeight","textAlign","ActionButton","label","icon","labelHidden","index","iconSize","labelDirection","active","rest","Value","scale","fontScale","opacity","parallel","timing","toValue","duration","easing","linear","start","transform","undefined","textTransform"],"mappings":"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","sourcesContent":["import React, {Fragment, useState, useEffect, useRef, Ref} from 'react';\nimport {Animated, UIManager, Easing, StyleSheet, View} from 'react-native';\nimport Icon from './Core/Icon';\nimport * as Palette from './../Helpers/palette';\nimport Ripple from './Core/Ripple';\nimport Text from './Core/Typography';\nimport {Transitioning, Transition} from 'react-native-reanimated';\nimport SafeAreaView from 'react-native-safe-area-view';\n// import {/ SafeAreaView } from 'react-native-safe-area-context';\ninterface BottomNavigationProps {\n  config?: {\n    initialScene?: string;\n    labelHidden?: boolean;\n    labelDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';\n    color?: string;\n  };\n  actions?: Array<{\n    label?: string;\n    icon?: string;\n    color?: string;\n    sceneKey?: string;\n  }>;\n  scenes?: Array<{key?: string; Scene?: React.ReactNode}>;\n  onChangeScene?: (params: {sceneKey?: string}) => void | null;\n  color?: string;\n  secondary?: boolean;\n  top?: any;\n}\nconst transition = (\n  <Transition.Sequence>\n    <Transition.Out type=\"fade\" interpolation=\"linear\" durationMs={200} />\n  </Transition.Sequence>\n);\nconst BottomNavigation: React.FC<BottomNavigationProps> = ({\n  config = {},\n  actions = [],\n  scenes = [],\n  color = '#000',\n  secondary = '#777',\n  onChangeScene = () => {},\n}) => {\n  const ref: Ref<any> = useRef(null);\n  const [state, setState] = useState(0);\n  const [ActiveSceneKey, setActiveSceneKey] = useState<any>(\n    config.initialScene || actions[0].sceneKey,\n  );\n\n  const handleChange = (key: string) => {\n    onChangeScene({sceneKey: key});\n    ref.current.animateNextTransition();\n    setState(state + 1);\n    setActiveSceneKey(key);\n  };\n  return (\n    <View style={{flex: 1}}>\n      <Transitioning.View\n        ref={ref}\n        style={{\n          flex: 1,\n          width: '100%',\n          height: '100%',\n          padding: 24,\n          backgroundColor: '#999',\n        }}\n        transition={transition}>\n        {scenes.map(\n          ({key, Scene}: {key?: string; Scene?: any}, k: any) =>\n            key === ActiveSceneKey && <Scene key={k} />,\n        )}\n      </Transitioning.View>\n      <SafeAreaView\n        style={[\n          styles.paper,\n          {\n            backgroundColor: color\n              ? color\n              : secondary\n              ? Palette.amber600\n              : Palette.blue600,\n          },\n        ]}>\n        <>\n          {actions.map((i: any, k: number) => (\n            <View style={styles.content} key={k}>\n              <ActionButton\n                {...i}\n                index={k}\n                handleChange={handleChange}\n                active={ActiveSceneKey === i.sceneKey}\n                {...config}\n              />\n            </View>\n          ))}\n        </>\n      </SafeAreaView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  paper: {\n    minHeight: 70,\n    flexDirection: 'row',\n    //     justifyContent: 'stretch',\n    alignContent: 'center',\n    alignItems: 'center',\n  },\n  content: {\n    flex: 1,\n    flexGrow: 1,\n    alignContent: 'stretch',\n    flexDirection: 'column',\n  },\n  action: {\n    minWidth: 80,\n    maxWidth: 168,\n    marginTop: 8,\n    marginBottom: 12,\n    paddingHorizontal: 12,\n    alignContent: 'center',\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n  },\n  text: {fontSize: 14, fontWeight: '600', textAlign: 'center'},\n});\nexport default BottomNavigation;\n\ninterface ActionButtonProps {\n  label?: string;\n  icon?: string;\n  color?: string;\n  sceneKey?: string;\n  labelHidden?: boolean;\n  labelDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';\n  index?: number;\n  // handleChange?: (index: number) => void | null;\n  handleChange?: any;\n  iconSize?: number;\n  active?: string;\n}\n\nconst ActionButton: React.FC<ActionButtonProps> = ({\n  label = '',\n  icon = 'send',\n  color = 'white',\n  labelHidden = false,\n  index = 0,\n  handleChange,\n  sceneKey,\n  iconSize = 24,\n  labelDirection = 'column',\n  active = 0,\n  ...rest\n}) => {\n  const [scale] = useState(new Animated.Value(active ? 1 : 0.9));\n  const [fontScale] = useState(new Animated.Value(active ? 15 : 1));\n  const opacity = useRef(new Animated.Value(active ? 1 : 0.56)).current;\n\n  useEffect(() => {\n    Animated.parallel([\n      Animated.timing(scale, {\n        toValue: active ? 1 : 0.9,\n        duration: 200,\n        easing: Easing.linear,\n      }),\n      Animated.timing(fontScale, {\n        toValue: active ? 15 : 1,\n        duration: 200,\n        easing: Easing.linear,\n      }),\n      Animated.timing(opacity, {\n        toValue: active ? 1 : 0.81,\n        duration: 200,\n        easing: Easing.linear,\n      }),\n    ]).start();\n  }, [active]);\n\n  return (\n    <Ripple\n      onPress={() => handleChange(sceneKey)}\n      {...rest}\n      rippleCentered={true}\n      rippleColor={color}>\n      <Animated.View\n        style={[\n          styles.action,\n          {transform: [{scale}], opacity, flexDirection: labelDirection},\n        ]}>\n        {icon && <Icon color={color} size={iconSize} name={icon} />}\n        {label === undefined ? (\n          <Fragment />\n        ) : labelHidden === false ? (\n          <Text style={[styles.text, {color}]} transform=\"capitalize\">\n            {label}\n          </Text>\n        ) : labelHidden === true ? (\n          <Animated.Text\n            style={[\n              styles.text,\n              {\n                color,\n                fontSize: fontScale,\n                textTransform: 'capitalize',\n              },\n            ]}>\n            {label}\n          </Animated.Text>\n        ) : (\n          <Fragment />\n        )}\n      </Animated.View>\n    </Ripple>\n  );\n};\n"]}