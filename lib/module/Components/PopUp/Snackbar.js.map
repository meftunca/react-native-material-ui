{"version":3,"sources":["Snackbar.tsx"],"names":["React","SafeAreaView","SafeAreaViews","StyleSheet","Platform","View","Surface","Text","useTheme","Button","Color","useAnimation","OS","Snackbar","style","label","color","backgroundColor","elevation","isOpen","action","onDismiss","roundness","dark","colors","opacity","type","toValue","initialValue","duration","delay","useEffect","setTimeout","styles","wrapper","minHeight","alignSelf","transform","scale","interpolate","inputRange","outputRange","minWidth","text","isDark","lighten","toString","darken","content","marginRight","surface","accessibilityLabel","onPress","padding","button","primary","create","position","bottom","width","marginLeft","marginTop","marginBottom","flexWrap","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {SafeAreaView as SafeAreaViews} from 'react-native-safe-area-context';\nimport {StyleSheet, StyleProp, ViewStyle, Platform, View} from 'react-native';\nimport Surface from '../Core/Surface';\nimport Text from '../Core/Typography';\nimport {useTheme} from '../../Theming';\nimport Button from '../Buttons/Button';\nimport Color from 'color';\nimport {useAnimation} from '../../Helpers/Hooks';\nconst SafeAreaView = Platform.OS === 'web' ? View : SafeAreaViews;\ntype ActionType = {\n  color?: string;\n  label?: string;\n  accessibilityLabel?: string;\n  onPress?: () => void;\n};\ntype SnackbarType = {\n  label: string;\n  color?: string;\n  //   avatar?:AvatarType;\n  style?: StyleProp<ViewStyle>;\n  backgroundColor?: string;\n  elevation?: number;\n  action?: ActionType | undefined;\n  isOpen?: boolean;\n  onDismiss?: () => void;\n};\nconst Snackbar: React.FC<SnackbarType> = ({\n  style,\n  label,\n  color,\n  backgroundColor,\n  elevation,\n  isOpen,\n  action,\n  onDismiss,\n}) => {\n  const {roundness, dark, color: colors} = useTheme();\n  const opacity = useAnimation({\n    type: 'timing',\n    toValue: isOpen ? 1 : 0,\n    initialValue: 0,\n    duration: 200,\n    delay: 0,\n  });\n  React.useEffect(() => {\n    if (isOpen === true) {\n      setTimeout(onDismiss, 3000);\n    }\n  }, [isOpen]);\n  return (\n    <SafeAreaView pointerEvents=\"box-none\" style={styles.wrapper}>\n      <Surface\n        pointerEvents=\"box-none\"\n        accessibilityLiveRegion=\"polite\"\n        alignContent=\"center\"\n        alignItems=\"center\"\n        direction=\"row\"\n        margin={8}\n        cornerRaidus={roundness}\n        style={\n          [\n            {\n              minHeight: 48,\n              opacity: opacity,\n              elevation,\n              alignSelf: Platform.OS === 'web' ? 'center' : 'auto',\n              transform: [\n                {\n                  scale: opacity.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [0.7, 1],\n                  }),\n                },\n              ],\n              minWidth: Platform.OS === 'web' ? 300 : '100%',\n              backgroundColor:\n                backgroundColor || Color(colors.text).isDark()\n                  ? Color(colors.text)\n                      .lighten(0.7)\n                      .toString()\n                  : Color(colors.text)\n                      .darken(0.8)\n                      .toString(),\n            },\n\n            style,\n          ] as StyleProp<ViewStyle>\n        }>\n        <Text\n          style={[\n            styles.content,\n            {\n              marginRight: action ? 0 : 16,\n              color: color || dark ? colors.text : colors.surface,\n            },\n          ]}>\n          {label}\n        </Text>\n        {action ? (\n          <Button\n            accessibilityLabel={action.accessibilityLabel}\n            onPress={() => {\n              action.onPress();\n              onDismiss();\n            }}\n            containerStyle={{padding: 0}}\n            style={styles.button}\n            color={colors.primary}\n            variant=\"text\">\n            {action.label}\n          </Button>\n        ) : null}\n      </Surface>\n    </SafeAreaView>\n  );\n};\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n  },\n  content: {\n    marginLeft: 16,\n    marginTop: 16,\n    marginBottom: 16,\n    flexWrap: 'wrap',\n    // flex: 1,\n  },\n  button: {\n    margin: 6,\n  },\n});\nexport default Snackbar;\n"]}