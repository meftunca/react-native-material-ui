{"version":3,"sources":["useDeviceOrientation.tsx"],"names":["screen","Dimensions","get","useDeviceOrientation","isOrientationPortrait","width","height","isOrientationLandscape","portrait","landscape","orientation","setOrientation","onChange","addEventListener","removeEventListener"],"mappings":"6QAAA,4BACA,yCAEA,GAAMA,CAAAA,MAAM,CAAGC,wBAAWC,GAAX,CAAe,QAAf,CAAf,CAEe,QAASC,CAAAA,oBAAT,EAAgC,CAC7C,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,UAC5BC,CAAAA,KAD4B,MAC5BA,KAD4B,CAE5BC,MAF4B,MAE5BA,MAF4B,OAMxBA,CAAAA,MAAM,EAAID,KANc,EAA9B,CAOA,GAAME,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,WAC7BF,CAAAA,KAD6B,OAC7BA,KAD6B,CAE7BC,MAF6B,OAE7BA,MAF6B,OAMzBD,CAAAA,KAAK,EAAIC,MANgB,EAA/B,CAR6C,cAgBP,oBAAS,CAC7CE,QAAQ,CAAEJ,qBAAqB,CAACJ,MAAD,CADc,CAE7CS,SAAS,CAAEF,sBAAsB,CAACP,MAAD,CAFY,CAAT,CAhBO,qDAgBtCU,WAhBsC,eAgBzBC,cAhByB,eAqB7C,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,OAAoC,IAAlCZ,CAAAA,MAAkC,OAAlCA,MAAkC,CACnDW,cAAc,CAAC,CACbH,QAAQ,CAAEJ,qBAAqB,CAACJ,MAAD,CADlB,CAEbS,SAAS,CAAEF,sBAAsB,CAACP,MAAD,CAFpB,CAAD,CAAd,CAID,CALD,CAOA,qBAAU,UAAM,CACdC,wBAAWY,gBAAX,CAA4B,QAA5B,CAAsCD,QAAtC,EAEA,MAAO,WAAM,CACXX,wBAAWa,mBAAX,CAA+B,QAA/B,CAAyCF,QAAzC,EACD,CAFD,CAGD,CAND,CAMG,CAACF,WAAW,CAACF,QAAb,CAAuBE,WAAW,CAACD,SAAnC,CANH,EAQA,MAAOC,CAAAA,WAAP,CACD","sourcesContent":["import {useEffect, useState} from 'react';\nimport {Dimensions, ScaledSize} from 'react-native';\n\nconst screen = Dimensions.get('screen');\n\nexport default function useDeviceOrientation() {\n  const isOrientationPortrait = ({\n    width,\n    height,\n  }: {\n    width: number;\n    height: number;\n  }) => height >= width;\n  const isOrientationLandscape = ({\n    width,\n    height,\n  }: {\n    width: number;\n    height: number;\n  }) => width >= height;\n\n  const [orientation, setOrientation] = useState({\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen),\n  });\n\n  const onChange = ({screen}: {screen: ScaledSize}) => {\n    setOrientation({\n      portrait: isOrientationPortrait(screen),\n      landscape: isOrientationLandscape(screen),\n    });\n  };\n\n  useEffect(() => {\n    Dimensions.addEventListener('change', onChange);\n\n    return () => {\n      Dimensions.removeEventListener('change', onChange);\n    };\n  }, [orientation.portrait, orientation.landscape]);\n\n  return orientation;\n}\n"]}