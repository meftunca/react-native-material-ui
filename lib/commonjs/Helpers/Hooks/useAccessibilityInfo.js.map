{"version":3,"sources":["useAccessibilityInfo.tsx"],"names":["useAccessibilityInfo","Platform","OS","reduceMotionEnabled","setReduceMotionEnabled","screenReaderEnabled","setScreenReaderEnabled","handleReduceMotionChanged","enabled","handleScreenReaderChanged","AccessibilityInfo","isReduceMotionEnabled","then","isScreenReaderEnabled","addEventListener","removeEventListener"],"mappings":"+PAAA,4BACA,yCAMA,GAAIA,CAAAA,oBAAoB,CAAG,sCAAM,KAAN,EAA3B,CACA,GAAIC,sBAASC,EAAT,GAAgB,KAApB,CACEF,oBAAoB,CAAG,+BAAM,eAC2B,oBAAS,KAAT,CAD3B,qDACpBG,mBADoB,eACCC,sBADD,8BAE2B,oBAAS,KAAT,CAF3B,sDAEpBC,mBAFoB,eAECC,sBAFD,eAI3B,GAAMC,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAACC,OAAD,QAChCJ,CAAAA,sBAAsB,CAACI,OAAD,CADU,EAAlC,CAEA,GAAMC,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAACD,OAAD,QAChCF,CAAAA,sBAAsB,CAACE,OAAD,CADU,EAAlC,CAGA,qBAAU,UAAM,CACdE,+BAAkBC,qBAAlB,GAA0CC,IAA1C,CAA+CL,yBAA/C,EACAG,+BAAkBG,qBAAlB,GAA0CD,IAA1C,CAA+CH,yBAA/C,EAEAC,+BAAkBI,gBAAlB,CACE,qBADF,CAEEP,yBAFF,EAIAG,+BAAkBI,gBAAlB,CACE,qBADF,CAEEL,yBAFF,EAKA,MAAO,WAAM,CACXC,+BAAkBK,mBAAlB,CACE,qBADF,CAEER,yBAFF,EAIAG,+BAAkBK,mBAAlB,CACE,qBADF,CAEEN,yBAFF,EAID,CATD,CAUD,CAvBD,CAuBG,EAvBH,EAyBA,MAAO,CAACN,mBAAmB,CAAnBA,mBAAD,CAAsBE,mBAAmB,CAAnBA,mBAAtB,CAAP,CACD,CAnCD,C,aAqCaL,oB","sourcesContent":["import {useEffect, useState} from 'react';\nimport {\n  Platform,\n  AccessibilityInfo,\n  AccessibilityChangeEvent,\n  AccessibilityEvent,\n} from 'react-native';\nlet useAccessibilityInfo = () => null;\nif (Platform.OS === 'web')\n  useAccessibilityInfo = () => {\n    const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);\n    const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);\n\n    const handleReduceMotionChanged = (enabled: AccessibilityChangeEvent) =>\n      setReduceMotionEnabled(enabled);\n    const handleScreenReaderChanged = (enabled: AccessibilityChangeEvent) =>\n      setScreenReaderEnabled(enabled);\n\n    useEffect(() => {\n      AccessibilityInfo.isReduceMotionEnabled().then(handleReduceMotionChanged);\n      AccessibilityInfo.isScreenReaderEnabled().then(handleScreenReaderChanged);\n\n      AccessibilityInfo.addEventListener(\n        'reduceMotionChanged',\n        handleReduceMotionChanged as (event: AccessibilityEvent) => void,\n      );\n      AccessibilityInfo.addEventListener(\n        'screenReaderChanged',\n        handleScreenReaderChanged as (event: AccessibilityEvent) => void,\n      );\n\n      return () => {\n        AccessibilityInfo.removeEventListener(\n          'reduceMotionChanged',\n          handleReduceMotionChanged as (event: AccessibilityEvent) => void,\n        );\n        AccessibilityInfo.removeEventListener(\n          'screenReaderChanged',\n          handleScreenReaderChanged as (event: AccessibilityEvent) => void,\n        );\n      };\n    }, []);\n\n    return {reduceMotionEnabled, screenReaderEnabled};\n  };\n\nexport default useAccessibilityInfo;\n"]}