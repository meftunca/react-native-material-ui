{"version":3,"sources":["index.tsx"],"names":["Flat","Outlined","Contained"],"mappings":"mKAAA,sEACA,8EACA,gF,aAEe,CACbA,IAAI,CAAJA,sBADa,CAEbC,QAAQ,CAARA,0BAFa,CAGbC,SAAS,CAATA,2BAHa,C","sourcesContent":["import Flat from './TextFieldFlat';\nimport Outlined from './TextFieldOutlined';\nimport Contained from './TextFieldContained';\n\nexport default {\n  Flat,\n  Outlined,\n  Contained,\n};\n\n// import React, {useState, useRef, useEffect} from 'react';\n// import {\n//   View,\n//   TextInput,\n//   Animated,\n//   Easing,\n//   StyleSheet,\n//   Keyboard,\n//   TextInputProps,\n// } from 'react-native';\n// import * as Palette from './../../Helpers/palette';\n// import BottomBar from './BottomHelper';\n// interface TextFieldProps extends TextInputProps {\n//   variant?: 'outlined' | 'contained' | 'flat';\n//   defaultValue?: string;\n//   value?: string;\n//   label?: string;\n//   error?: boolean;\n//   success?: boolean;\n//   warning?: boolean;\n//   count?: boolean;\n//   multiLine?: boolean;\n//   Left?: any;\n//   Right?: any;\n//   disabled?: boolean;\n//   ripple?: boolean;\n//   numberOfLines?: number;\n//   helperText?: string;\n//   bottomWrapperStyle?: object;\n//   clearButtonMode?:\n//     | 'never'\n//     | 'while-editing'\n//     | 'unless-editing'\n//     | 'always'\n//     | undefined;\n//   placeholder?: string;\n//   min?: number;\n//   max?: number;\n//   onChange?: (text: any) => void | null;\n// }\n\n// const TextField: React.FC<TextFieldProps> = ({\n//   variant,\n//   defaultValue,\n//   label,\n//   value,\n//   error,\n//   success,\n//   warning,\n//   count,\n//   Left,\n//   Right,\n//   onChange,\n//   disabled,\n//   ripple,\n//   helperText,\n//   bottomWrapperStyle,\n//   clearButtonMode,\n//   placeholder,\n//   min,\n//   max,\n//   ...rest\n// }) => {\n//   const [state, setStateBase] = useState<{nativeEvent: any; active: boolean}>({\n//     active: false,\n//     nativeEvent: {},\n//   });\n//   const labelAnim = useRef(new Animated.Value(0)).current;\n//   const setState = (newState: any) => setStateBase({...state, ...newState});\n//   useEffect(() => {\n//     let count = value ? value.length : defaultValue ? defaultValue.length : 0;\n//     setState({\n//       nativeEvent: {eventCount: count, text: value || defaultValue},\n//     });\n//     count > 0 && _active();\n//   }, []);\n//   const _active = () => {\n//       setState({active: true});\n//       Animated.timing(labelAnim, {\n//         toValue: 1,\n//         easing: Easing.bezier(0.25, 0.5, 0.75, 0.1),\n//         duration: 200,\n//       }).start();\n//     },\n//     _passive = () => {\n//       if (state.nativeEvent.eventCount > 0) return;\n//       setState({active: false});\n//       Animated.timing(labelAnim, {\n//         toValue: 0,\n//         easing: Easing.bezier(1, 0.75, 0.5, 0.25),\n//         duration: 200,\n//       }).start();\n//     },\n//     _onChange = (prop: any) => {\n//       prop.nativeEvent.eventCount = prop.nativeEvent.text.length;\n//       setState({nativeEvent: prop.nativeEvent});\n//       if (max != undefined && prop.nativeEvent.text.length > max) return;\n//       onChange && onChange(prop);\n//     };\n\n//   let borderWidth = disabled ? 1.5 : 1,\n//     variantStyle =\n//       variant === 'contained'\n//         ? {\n//             backgroundColor: '#fff',\n//             borderTopLeftRadius: 4,\n//             borderTopRightRadius: 4,\n//             elevation: 2,\n//             paddingTop: 4,\n//             borderBottomWidth: borderWidth,\n//           }\n//         : variant === 'outlined'\n//         ? {\n//             backgroundColor: 'transparent',\n//             borderRadius: 4,\n//             borderWidth: borderWidth,\n//             paddingTop: 0,\n//           }\n//         : {\n//             borderBottomWidth: borderWidth,\n//             borderRadius: 0,\n//           },\n//     outlineLabelStyle =\n//       variant === 'outlined'\n//         ? {\n//             //   height: state.active ? 20 : \"auto\",\n//             // backgroundColor: state.active ? 'white' : 'transparent',\n//             width: 'auto',\n//             padding: 3,\n//           }\n//         : {},\n//     labelPosArr =\n//       variant == 'outlined'\n//         ? [16, -10]\n//         : variant == 'contained'\n//         ? [24, 8]\n//         : [18, -6],\n//     labelFontSize = labelAnim.interpolate({\n//       inputRange: [0, 1],\n//       outputRange: [16, 12],\n//     }),\n//     labelLocationTranslateY = labelAnim.interpolate({\n//       inputRange: [0, 1],\n//       outputRange: labelPosArr,\n//     }),\n//     colors = state.active ? Palette.blue500 : Palette.grey700;\n//   colors = error\n//     ? Palette.red500\n//     : warning\n//     ? Palette.amber800\n//     : success\n//     ? Palette.green500\n//     : colors;\n\n//   let style = StyleSheet.create({\n//     container: {\n//       minHeight: 56,\n//       margin: 8,\n//       // marginVertical: variant == \"outlined\" ? 8 : 6\n//     },\n//     wrapper: {\n//       borderColor: colors,\n//       paddingHorizontal: !variant ? 0 : 12,\n//     },\n//     contentWrapper: {\n//       flexDirection: 'row',\n//       alignItems: 'center',\n//       alignContent: 'center',\n//       minHeight: 56,\n//       minWidth: 280,\n//       margin: 0,\n//       padding: 0,\n//     },\n//     leftAction: {\n//       fontSize: 20,\n//       color: colors,\n//       marginRight: 4,\n//       marginLeft: !variant ? 4 : 0,\n//       paddingTop:\n//         variant === 'outlined' ? 14 : variant === 'contained' ? 10 : 12,\n//       paddingBottom:\n//         variant === 'outlined' ? 4 : variant === 'contained' ? 4 : 4,\n//       marginBottom: 4,\n//     },\n//     rightAction: {\n//       fontSize: 20,\n//       color: colors,\n//       marginLeft: 4,\n//       marginRight: !variant ? 4 : 0,\n//       marginBottom: 4,\n//     },\n//     label: {\n//       position: 'absolute',\n//       backgroundColor:\n//         state.active && variant === 'outlined' ? 'white' : 'transparent',\n//       // height: 18,\n//       paddingHorizontal: 4,\n//       top: 0,\n//       left: Left ? 40 : variant === 'contained' ? 10 : !variant ? 0 : 12,\n//       // bottom: 6,\n//     },\n//     labelWrapper: {\n//       flex: 1,\n//       zIndex: 999,\n//       ...outlineLabelStyle,\n//     },\n//     fieldInput: {\n//       flexGrow: 1,\n//       height: '100%',\n//       fontSize: 16,\n//       color: Palette.grey700,\n//       minHeight: 28,\n//     },\n//     bottomWrapper: {\n//       flexDirection: 'row',\n//       justifyContent: 'space-between',\n//       paddingLeft: 14,\n//       paddingRight: 8,\n//       ...bottomWrapperStyle,\n//     },\n//     helperWrapper: {\n//       flexDirection: 'row',\n//       alignItems: 'center',\n//       alignSelf: 'center',\n//       marginVertical: 6,\n//     },\n//     helperText: {\n//       height: 16,\n//       color: colors,\n//       fontSize: 12,\n//     },\n//   });\n//   return (\n//     <View style={style.container}>\n//       <Animated.View style={[style.wrapper, variantStyle]}>\n//         {label && (\n//           <Animated.View\n//             style={[\n//               style.label,\n//               {\n//                 transform: [\n//                   {\n//                     translateY: labelLocationTranslateY,\n//                   },\n//                 ],\n//               },\n//             ]}>\n//             <View style={style.labelWrapper}>\n//               <Animated.Text\n//                 style={{\n//                   color: colors,\n//                   fontSize: labelFontSize,\n//                 }}>\n//                 {label}\n//               </Animated.Text>\n//             </View>\n//           </Animated.View>\n//         )}\n//         <View style={style.contentWrapper}>\n//           {Left && <Left style={style.leftAction} />}\n//           <TextInput\n//             placeholderTextColor={Palette.grey700}\n//             placeholder={state.active ? '' : placeholder}\n//             style={style.fieldInput}\n//             onChange={_onChange}\n//             onFocus={_active}\n//             onBlur={_passive}\n//             clearButtonMode={clearButtonMode}\n//             //  clearButtonMode={clearButtonMode || \"always\"}\n//             blurOnSubmit={true}\n//             onSubmitEditing={Keyboard.dismiss}\n//             {...rest}\n//           />\n//           {Right && <Right style={style.rightAction} />}\n//         </View>\n//       </Animated.View>\n//       <BottomBar\n//         helperText={helperText}\n//         success={success}\n//         error={error}\n//         warning={warning}\n//         count={count}\n//         max={max}\n//         bottomWrapperStyle={style.bottomWrapper}\n//         helperTextStyle={style.helperText}\n//         helperWrapperStyle={style.helperWrapper}\n//         eventCount={state.nativeEvent ? state.nativeEvent.eventCount : 0}\n//       />\n//     </View>\n//   );\n// };\n\n// export default TextField;\n"]}