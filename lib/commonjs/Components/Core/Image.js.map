{"version":3,"sources":["Image.tsx"],"names":["Image","style","source","Dimensions","get","phoneWidth","width","phoneHeight","height","setPhoneWidth","defImage","setDefImage","size","setSize","widthListener","screen","calculateImage","ratio","console","log","addEventListener","ImageComp","getSize","uri","w","h","removeEventListener","backgroundColor"],"mappings":"kbAAA,qDAEA,yC,64BAcA,GAAMA,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAA2C,IAAzCC,CAAAA,KAAyC,MAAzCA,KAAyC,CAAlCC,MAAkC,MAAlCA,MAAkC,eACW,oBAChEC,wBAAWC,GAAX,CAAe,QAAf,CADgE,CADX,+EACxCC,UADwC,aAC/CC,KAD+C,CACpBC,WADoB,aAC5BC,MAD4B,CACNC,aADM,8BAIvB,oBAA0C,CACxEH,KAAK,CAAE,CADiE,CAExEE,MAAM,CAAE,CAFgE,CAA1C,CAJuB,sDAIhDE,QAJgD,eAItCC,WAJsC,8BAQ/B,oBAA0C,CAChEL,KAAK,CAAE,CADyD,CAEhEE,MAAM,CAAE,CAFwD,CAA1C,CAR+B,sDAQhDI,IARgD,eAQ1CC,OAR0C,eAYvD,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,OAAmB,IAAjBC,CAAAA,MAAiB,OAAjBA,MAAiB,CACvCN,aAAa,CAACM,MAAM,CAACT,KAAR,CAAb,CACD,CAFD,CAGA,GAAMU,CAAAA,cAAmB,CAAG,QAAtBA,CAAAA,cAAsB,EAAM,CAChC,GAAIC,CAAAA,KAAK,CAAGZ,UAAU,CAAGK,QAAQ,CAACJ,KAAlC,CACAO,OAAO,CAAC,CACNP,KAAK,CAAED,UADD,CAENG,MAAM,CAAED,WAAW,CAAGU,KAFhB,CAAD,CAAP,CAIAC,OAAO,CAACC,GAAR,CAAY,CACVb,KAAK,CAAEI,QAAQ,CAACJ,KADN,CAEVD,UAAU,CAAEA,UAFF,CAAZ,EAID,CAVD,CAWA,qBAAU,UAAM,CACdF,wBAAWiB,gBAAX,CAA4B,QAA5B,CAAsCN,aAAtC,EACAO,mBAAUC,OAAV,CACEpB,MAAM,CAACqB,GAAP,CAAarB,MAAM,CAACqB,GAApB,CAA0BrB,MAD5B,CAEE,SAACsB,CAAD,CAAIC,CAAJ,CAAU,CACRd,WAAW,kBAAKD,QAAL,EAAeJ,KAAK,CAAEkB,CAAtB,CAAyBhB,MAAM,CAAEiB,CAAjC,GAAX,CACAT,cAAc,GACf,CALH,CAME,UAAM,CAAE,CANV,EAQA,MAAO,kBAAMb,yBAAWuB,mBAAX,CAA+B,QAA/B,CAAyCZ,aAAzC,CAAN,EAAP,CACD,CAXD,CAWG,EAXH,EAYA,qBAAU,UAAM,CACdE,cAAc,GACf,CAFD,CAEG,CAACX,UAAD,CAFH,EAGA,MACEO,CAAAA,IAAI,CAACN,KAAL,CAAa,CAAb,EACE,6BAAC,kBAAD,EACE,MAAM,CAAEJ,MADV,CAEE,KAAK,CAAE,CAACD,KAAD,CAAQW,IAAR,CAAc,CAACe,eAAe,CAAE,OAAlB,CAAd,CAFT,CAGE,UAAU,CAAC,OAHb,CAIE,YAAY,CAAC,MAJf,iDAFJ,CAUD,CAnDD,C,aAqDe3B,K","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport {\n  Image as ImageComp,\n  Dimensions,\n  ImageSourcePropType,\n  ImageStyle,\n} from 'react-native';\n\ntype ImageCustomPropsBase = {\n  source: any;\n\n  style?: ImageStyle;\n  width?: number;\n  ratio?: '1:1' | '4:3' | '1:1.91';\n};\nconst Image = ({style, source}: ImageCustomPropsBase) => {\n  const [{width: phoneWidth, height: phoneHeight}, setPhoneWidth] = useState(\n    Dimensions.get('screen'),\n  );\n  const [defImage, setDefImage] = useState<{width: number; height: number}>({\n    width: 1,\n    height: 1,\n  });\n  const [size, setSize] = useState<{width: number; height: number}>({\n    width: 1,\n    height: 1,\n  });\n  const widthListener = ({screen}: any) => {\n    setPhoneWidth(screen.width);\n  };\n  const calculateImage: any = () => {\n    let ratio = phoneWidth / defImage.width;\n    setSize({\n      width: phoneWidth,\n      height: phoneHeight / ratio,\n    });\n    console.log({\n      width: defImage.width,\n      phoneWidth: phoneWidth,\n    });\n  };\n  useEffect(() => {\n    Dimensions.addEventListener('change', widthListener);\n    ImageComp.getSize(\n      source.uri ? source.uri : source,\n      (w, h) => {\n        setDefImage({...defImage, width: w, height: h});\n        calculateImage();\n      },\n      () => {},\n    );\n    return () => Dimensions.removeEventListener('change', widthListener);\n  }, []);\n  useEffect(() => {\n    calculateImage();\n  }, [phoneWidth]);\n  return (\n    size.width > 1 && (\n      <ImageComp\n        source={source}\n        style={[style, size, {backgroundColor: 'black'}]}\n        resizeMode=\"cover\"\n        resizeMethod=\"auto\"\n      />\n    )\n  );\n};\n\nexport default Image;\n"]}