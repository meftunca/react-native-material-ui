{"version":3,"sources":["Image.tsx"],"names":["Image","imageStyle","ratio","source","props","animation","type","toValue","initialValue","width","height","size","setSize","_onLayout","event","containerWidth","nativeEvent","layout","sourceSize","ImageComp","resolveAssetSource","getSize","uri","console","log","params","setValue","opacity"],"mappings":"knBAAA,qDAEA,yCAWA,oC,64BASA,GAAMA,CAAAA,KAAqC,CAAG,QAAxCA,CAAAA,KAAwC,MAKxC,IAJJC,CAAAA,UAII,MAJJA,UAII,CAHJC,KAGI,MAHJA,KAGI,CAFJC,MAEI,MAFJA,MAEI,CADDC,KACC,6EACJ,GAAMC,CAAAA,SAAS,CAAG,wBAAa,CAC7BC,IAAI,CAAE,QADuB,CAE7BC,OAAO,CAAE,CAFoB,CAG7BC,YAAY,CAAE,CAHe,CAAb,CAAlB,CADI,cAMoB,oBAA0C,CAChEC,KAAK,CAAE,CADyD,CAEhEC,MAAM,CAAE,CAFwD,CAA1C,CANpB,qDAMGC,IANH,eAMSC,OANT,eAWJ,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAC,KAAK,CAAI,CACzB,GAAIC,CAAAA,cAAc,CAAGD,KAAK,CAACE,WAAN,CAAkBC,MAAlB,CAAyBR,KAA9C,CACA,GAAIP,KAAJ,CAAW,CACTU,OAAO,kBACFD,IADE,EAELF,KAAK,CAAEM,cAFF,CAGLL,MAAM,CAAEK,cAAc,CAAGb,KAHpB,GAAP,CAKD,CAND,IAMO,IAAI,MAAOC,CAAAA,MAAP,GAAkB,QAAtB,CAAgC,CACrC,GAAIe,CAAAA,UAAU,CAAGC,mBAAUC,kBAAV,CAA6BjB,MAA7B,CAAjB,CAEAS,OAAO,kBACFD,IADE,EAELF,KAAK,CAAEM,cAFF,CAGLL,MAAM,CAAGK,cAAc,CAAGG,UAAU,CAACR,MAA7B,CAAuCQ,UAAU,CAACT,KAHrD,GAAP,CAKD,CARM,IAQA,IAAI,MAAON,CAAAA,MAAP,GAAkB,QAAtB,CAAgC,CACrCgB,mBAAUE,OAAV,CACElB,MAAM,CAACmB,GADT,CAEE,SAACb,KAAD,CAAQC,MAAR,CAAmB,CACjBa,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4Bf,KAA5B,CAAmCC,MAAnC,EACAE,OAAO,kBACFD,IADE,EAELF,KAAK,CAAEM,cAFF,CAGLL,MAAM,CAAGK,cAAc,CAAGL,MAAlB,CAA4BD,KAH/B,GAAP,CAKD,CATH,CAUE,UAAe,+BAAXgB,MAAW,0CAAXA,MAAW,wBACbF,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAsBC,MAAtB,EACD,CAZH,EAcD,CACDpB,SAAS,CAACqB,QAAV,CAAmB,CAAnB,EACD,CAjCD,CAkCA,qBAAU,UAAM,CAAE,CAAlB,CAAoB,EAApB,EAEA,MACE,8BAAC,iBAAD,EACE,QAAQ,CAAEb,SADZ,CAEE,KAAK,CAAE,CACLJ,KAAK,CAAE,MADF,CAFT,iDAKE,6BAAC,qBAAD,CAAU,KAAV,wBACE,MAAM,CAAEN,MADV,CAEE,KAAK,CAAE,CAACF,UAAD,CAAaU,IAAb,CAAmB,CAACgB,OAAO,CAAEtB,SAAV,CAAnB,CAFT,EAGMD,KAHN,mDALF,CADF,CAaD,CAjED,C,aAmEeJ,K","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport {\n  Image as ImageComp,\n  Animated,\n  View,\n  ImageStyle,\n  StyleProp,\n  ViewStyle,\n  ImagePropsBase,\n  ImageRequireSource,\n  ImageURISource,\n} from 'react-native';\nimport {useAnimation} from 'Helpers/Hooks';\n\ntype ImageCustomPropsBase = ImagePropsBase & {\n  imageStyle?: StyleProp<ImageStyle>;\n  containerStyle?: StyleProp<ViewStyle>;\n  width?: number;\n  ratio?: number;\n  source?: {uri?: string};\n};\nconst Image: React.FC<ImageCustomPropsBase> = ({\n  imageStyle,\n  ratio,\n  source,\n  ...props\n}) => {\n  const animation = useAnimation({\n    type: 'spring',\n    toValue: 0,\n    initialValue: 0,\n  });\n  const [size, setSize] = useState<{width: number; height: number}>({\n    width: 0,\n    height: 0,\n  });\n\n  const _onLayout = event => {\n    let containerWidth = event.nativeEvent.layout.width;\n    if (ratio) {\n      setSize({\n        ...size,\n        width: containerWidth,\n        height: containerWidth * ratio,\n      });\n    } else if (typeof source === 'number') {\n      let sourceSize = ImageComp.resolveAssetSource(source);\n\n      setSize({\n        ...size,\n        width: containerWidth,\n        height: (containerWidth * sourceSize.height) / sourceSize.width,\n      });\n    } else if (typeof source === 'object') {\n      ImageComp.getSize(\n        source.uri,\n        (width, height) => {\n          console.log('width,height', width, height);\n          setSize({\n            ...size,\n            width: containerWidth,\n            height: (containerWidth * height) / width,\n          });\n        },\n        (...params) => {\n          console.log('params', params);\n        },\n      );\n    }\n    animation.setValue(1);\n  };\n  useEffect(() => {}, []);\n\n  return (\n    <View\n      onLayout={_onLayout}\n      style={{\n        width: '100%',\n      }}>\n      <Animated.Image\n        source={source}\n        style={[imageStyle, size, {opacity: animation}]}\n        {...props}\n      />\n    </View>\n  );\n};\n\nexport default Image;\n"]}