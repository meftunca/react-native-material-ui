{"version":3,"sources":["BackDropModal.tsx"],"names":["SafeAreaViewAnimated","Animated","createAnimatedComponent","SafeAreaView","BackDropModal","onClose","children","animationType","duration","delay","visible","fullScreen","backdropColor","modalVisible","setModalVisible","windowHeight","window","height","animation","type","toValue","initialValue","easing","Easing","ease","setTimeout","StyleSheet","absoluteFill","zIndex","flex","backgroundColor","opacity","top","bottom","absoluteFillObject","justifyContent","alignContent","alignItems","alignSelf","flexGrow","flexShrink","interpolate","inputRange","outputRange","width"],"mappings":"kbAAA,qDACA,yCASA,4FACA,oC,q5BACA,GAAMA,CAAAA,oBAAoB,CAAGC,sBAASC,uBAAT,CAAiCC,gCAAjC,CAA7B,CAYA,GAAMC,CAAAA,aAA2C,CAAG,QAA9CA,CAAAA,aAA8C,MAS9C,IARJC,CAAAA,OAQI,MARJA,OAQI,CAPJC,QAOI,MAPJA,QAOI,CANJC,aAMI,MANJA,aAMI,oBALJC,QAKI,CALJA,QAKI,wBALO,GAKP,eAJJC,KAII,MAJJA,KAII,mBAHJC,OAGI,CAHJA,OAGI,uBAHM,KAGN,mCAFJC,UAEI,CAFJA,UAEI,0BAFS,KAET,yCADJC,aACI,CADJA,aACI,6BADY,aACZ,kCACoC,oBAAkBF,OAAlB,CADpC,qDACGG,YADH,eACiBC,eADjB,eAEJ,GAAMC,CAAAA,YAAY,CAAG,2BAAgBC,MAAhB,CAAuBC,MAA5C,CACA,GAAMC,CAAAA,SAAS,CAAG,wBAAa,CAC7BC,IAAI,CAAE,QADuB,CAE7BC,OAAO,CAAEV,OAAO,CAAG,CAAH,CAAO,CAFM,CAG7BW,YAAY,CAAEX,OAAO,CAAG,CAAH,CAAO,CAHC,CAI7BY,MAAM,CAAEC,oBAAOC,IAJc,CAK7BhB,QAAQ,CAARA,QAL6B,CAM7BC,KAAK,CAALA,KAN6B,CAAb,CAAlB,CAQA,qBAAU,UAAM,CACd,MAAO,kBAAMJ,CAAAA,OAAO,EAAIA,OAAO,EAAxB,EAAP,CACD,CAFD,CAEG,EAFH,EAIA,qBAAU,UAAM,CACd,GAAIK,OAAO,GAAK,IAAhB,CAAsBI,eAAe,CAAC,IAAD,CAAf,CAAtB,IACK,IAAIF,aAAa,GAAK,aAAtB,CAAqCE,eAAe,CAACJ,OAAD,CAAf,CAArC,IAEHe,CAAAA,UAAU,CAAC,UAAM,CACfX,eAAe,CAACJ,OAAD,CAAf,CACD,CAFS,CAEP,IAFO,CAAV,CAGH,CAPD,CAOG,CAACA,OAAD,CAPH,EAQA,MACE,8BAAC,kBAAD,EACE,WAAW,KADb,CAEE,qBAAqB,CAAE,CACrB,WADqB,CAErB,gBAFqB,CAGrB,iBAHqB,CAIrB,UAJqB,CAKrB,sBALqB,CAFzB,CASE,QAAQ,CAAE,KATZ,CAUE,mBAAmB,CAAE,IAVvB,CAWE,aAAa,CAAC,MAXhB,CAYE,OAAO,CAAEG,YAZX,CAaE,SAAS,CAAER,OAbb,CAcE,cAAc,CAAEA,OAdlB,iDAeE,6BAAC,qBAAD,CAAU,IAAV,EACE,aAAa,CAAEK,OAAO,CAAG,MAAH,CAAY,MADpC,CAEE,wBAAwB,KAF1B,CAGE,uBAAuB,CAAC,QAH1B,CAIE,KAAK,CAAE,CAACgB,wBAAWC,YAAZ,CAJT,iDAKE,6BAAC,qCAAD,EAA0B,KAAK,CAAE,CAACC,MAAM,CAAE,CAAT,CAAjC,CAA8C,OAAO,CAAEvB,OAAvD,iDACE,6BAAC,qBAAD,CAAU,IAAV,EACE,KAAK,CAAE,CACLwB,IAAI,CAAE,CADD,CAELC,eAAe,CACbvB,aAAa,GAAK,OAAlB,CAA4B,aAA5B,CAA4CK,aAHzC,CAILmB,OAAO,CAAEb,SAJJ,CADT,iDADF,CALF,CAeE,6BAAC,oBAAD,EACE,UAAU,CAAE,CAACc,GAAG,CAAE,QAAN,CAAgBC,MAAM,CAAE,QAAxB,CADd,CAEE,KAAK,CAAE,CACLtB,UAAU,GAAK,IAAf,EAAuB,CACrBmB,eAAe,CAAE,OADI,CADlB,kBAKAJ,wBAAWQ,kBALX,EAMHC,cAAc,CAAE,QANb,CAOHC,YAAY,CAAE,QAPX,CAQHC,UAAU,CAAE,QART,CASHC,SAAS,CAAE,QATR,CAUHC,QAAQ,CAAE,CAVP,CAWHC,UAAU,CAAE,CAXT,CAaHZ,MAAM,CAAE,GAbL,GAeLjB,UAAU,EAAI,CAACkB,IAAI,CAAE,CAAP,CAAUZ,MAAM,CAAE,MAAlB,CAfT,CAgBLV,aAAa,GAAK,OAAlB,CACI,CACEyB,GAAG,CAAEd,SAAS,CAACuB,WAAV,CAAsB,CACzBC,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADa,CAEzBC,WAAW,CAAE,CAAC5B,YAAD,CAAe,CAAf,CAFY,CAAtB,CADP,CADJ,CAOIR,aAAa,GAAK,MAAlB,CACA,CACEwB,OAAO,CAAEb,SADX,CADA,CAIA,EA3BC,CAFT,CA+BE,aAAa,CAAC,UA/BhB,iDAgCE,6BAAC,iCAAD,EACE,QAAQ,CAAC,QADX,CAEE,KAAK,CAAE,CACL,CACE0B,KAAK,CAAEjC,UAAU,CAAG,MAAH,CAAY,KAD/B,CAEEmB,eAAe,CAAE,aAFnB,CAGEK,cAAc,CAAE,QAHlB,CAIEG,SAAS,CAAE,QAJb,CADK,CAFT,kDAUGhC,QAVH,CAhCF,CAfF,CAfF,CADF,CA+ED,CA/GD,C,aAiHeF,a","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n  Modal,\n  StyleSheet,\n  View,\n  TouchableWithoutFeedback,\n  KeyboardAvoidingView,\n  Animated,\n  Easing,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport {useAnimation, useDimensions} from 'Helpers/Hooks';\nconst SafeAreaViewAnimated = Animated.createAnimatedComponent(SafeAreaView);\ninterface BackDropModalProps {\n  visible?: boolean;\n  fullScreen?: boolean;\n  backdropColor?: string;\n  duration?: number;\n  delay?: number;\n  animationType?: 'fade' | 'slide' | 'none';\n  onClose?: () => void | undefined;\n  children?: React.ReactNode;\n}\n\nconst BackDropModal: React.FC<BackDropModalProps> = ({\n  onClose,\n  children,\n  animationType,\n  duration = 400,\n  delay,\n  visible = false,\n  fullScreen = false,\n  backdropColor = 'transparent',\n}) => {\n  const [modalVisible, setModalVisible] = useState<boolean>(visible);\n  const windowHeight = useDimensions().window.height;\n  const animation = useAnimation({\n    type: 'timing',\n    toValue: visible ? 1 : 0,\n    initialValue: visible ? 1 : 0,\n    easing: Easing.ease,\n    duration,\n    delay,\n  });\n  useEffect(() => {\n    return () => onClose && onClose();\n  }, []);\n\n  useEffect(() => {\n    if (visible === true) setModalVisible(true);\n    else if (backdropColor === 'transparent') setModalVisible(visible);\n    else\n      setTimeout(() => {\n        setModalVisible(visible);\n      }, 1200);\n  }, [visible]);\n  return (\n    <Modal\n      transparent\n      supportedOrientations={[\n        'landscape',\n        'landscape-left',\n        'landscape-right',\n        'portrait',\n        'portrait-upside-down',\n      ]}\n      animated={false}\n      hardwareAccelerated={true}\n      animationType=\"none\"\n      visible={modalVisible}\n      onDismiss={onClose}\n      onRequestClose={onClose}>\n      <Animated.View\n        pointerEvents={visible ? 'auto' : 'none'}\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={[StyleSheet.absoluteFill]}>\n        <TouchableWithoutFeedback style={{zIndex: 0}} onPress={onClose}>\n          <Animated.View\n            style={{\n              flex: 1,\n              backgroundColor:\n                animationType === 'slide' ? 'transparent' : backdropColor,\n              opacity: animation,\n            }}\n          />\n        </TouchableWithoutFeedback>\n        <SafeAreaViewAnimated\n          forceInset={{top: 'always', bottom: 'always'}}\n          style={[\n            fullScreen === true && {\n              backgroundColor: 'white',\n            },\n            {\n              ...StyleSheet.absoluteFillObject,\n              justifyContent: 'center',\n              alignContent: 'center',\n              alignItems: 'center',\n              alignSelf: 'center',\n              flexGrow: 1,\n              flexShrink: 1,\n              // backgroundColor: 'red',\n              zIndex: 999,\n            },\n            fullScreen && {flex: 1, height: '100%'},\n            animationType === 'slide'\n              ? {\n                  top: animation.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [windowHeight, 0],\n                  }),\n                }\n              : animationType === 'fade'\n              ? {\n                  opacity: animation,\n                }\n              : {},\n          ]}\n          pointerEvents=\"box-none\">\n          <KeyboardAvoidingView\n            behavior=\"height\"\n            style={[\n              {\n                width: fullScreen ? '100%' : '80%',\n                backgroundColor: 'transparent',\n                justifyContent: 'center',\n                alignSelf: 'center',\n              },\n            ]}>\n            {children}\n          </KeyboardAvoidingView>\n        </SafeAreaViewAnimated>\n      </Animated.View>\n    </Modal>\n  );\n};\n\nexport default BackDropModal;\n"]}