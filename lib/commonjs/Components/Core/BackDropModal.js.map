{"version":3,"sources":["BackDropModal.tsx"],"names":["BackDropModal","onClose","children","animationType","visible","fullScreen","backdropColor","modalVisible","setModalVisible","setTimeout","StyleSheet","absoluteFill","zIndex","flex","backgroundColor","absoluteFillObject","justifyContent","alignContent","alignItems","alignSelf","flexGrow","flexShrink","height","width"],"mappings":"kbAAA,qDACA,yCAOA,4F,q5BAUA,GAAMA,CAAAA,aAA2C,CAAG,QAA9CA,CAAAA,aAA8C,MAO9C,IANJC,CAAAA,OAMI,MANJA,OAMI,CALJC,QAKI,MALJA,QAKI,CAJJC,aAII,MAJJA,aAII,mBAHJC,OAGI,CAHJA,OAGI,uBAHM,KAGN,mCAFJC,UAEI,CAFJA,UAEI,0BAFS,KAET,yCADJC,aACI,CADJA,aACI,6BADY,aACZ,kCACoC,oBAAkBF,OAAlB,CADpC,qDACGG,YADH,eACiBC,eADjB,eAEJ,qBAAU,UAAM,CACd,MAAO,kBAAMP,CAAAA,OAAO,EAAIA,OAAO,EAAxB,EAAP,CACD,CAFD,CAEG,EAFH,EAIA,qBAAU,UAAM,CACd,GAAIG,OAAO,GAAK,IAAhB,CAAsBI,eAAe,CAAC,IAAD,CAAf,CAAtB,IACK,IAAIF,aAAa,GAAK,aAAtB,CAAqCE,eAAe,CAACJ,OAAD,CAAf,CAArC,IAEHK,CAAAA,UAAU,CAAC,UAAM,CACfD,eAAe,CAACJ,OAAD,CAAf,CACD,CAFS,CAEP,GAFO,CAAV,CAGH,CAPD,CAOG,CAACA,OAAD,CAPH,EAQA,MACE,8BAAC,kBAAD,EACE,WAAW,KADb,CAEE,qBAAqB,CAAE,CACrB,WADqB,CAErB,gBAFqB,CAGrB,iBAHqB,CAIrB,UAJqB,CAKrB,sBALqB,CAFzB,CASE,QAAQ,CAAE,IATZ,CAUE,mBAAmB,CAAE,IAVvB,CAWE,aAAa,CAAED,aAXjB,CAYE,OAAO,CAAEI,YAZX,CAaE,SAAS,CAAEN,OAbb,CAcE,cAAc,CAAEA,OAdlB,iDAeE,6BAAC,iBAAD,EACE,aAAa,CAAEG,OAAO,CAAG,MAAH,CAAY,MADpC,CAEE,wBAAwB,KAF1B,CAGE,uBAAuB,CAAC,QAH1B,CAIE,KAAK,CAAE,CAACM,wBAAWC,YAAZ,CAJT,iDAKE,6BAAC,qCAAD,EAA0B,KAAK,CAAE,CAACC,MAAM,CAAE,CAAT,CAAjC,CAA8C,OAAO,CAAEX,OAAvD,iDACE,6BAAC,iBAAD,EACE,KAAK,CAAE,CACLY,IAAI,CAAE,CADD,CAELC,eAAe,CAAER,aAFZ,CADT,iDADF,CALF,CAaE,6BAAC,gCAAD,EACE,KAAK,CAAE,CACLD,UAAU,GAAK,IAAf,EAAuB,CACrBS,eAAe,CAAE,OADI,CADlB,kBAKAJ,wBAAWK,kBALX,EAMHC,cAAc,CAAE,QANb,CAOHC,YAAY,CAAE,QAPX,CAQHC,UAAU,CAAE,QART,CASHC,SAAS,CAAE,QATR,CAUHC,QAAQ,CAAE,CAVP,CAWHC,UAAU,CAAE,CAXT,CAaHT,MAAM,CAAE,GAbL,GAeLP,UAAU,EAAI,CAACQ,IAAI,CAAE,CAAP,CAAUS,MAAM,CAAE,MAAlB,CAfT,CADT,CAkBE,aAAa,CAAC,UAlBhB,iDAmBE,6BAAC,iCAAD,EACE,QAAQ,CAAC,QADX,CAEE,KAAK,CAAE,CACL,CACEC,KAAK,CAAElB,UAAU,CAAG,MAAH,CAAY,KAD/B,CAEES,eAAe,CAAE,aAFnB,CAGEE,cAAc,CAAE,QAHlB,CAIEG,SAAS,CAAE,QAJb,CADK,CAFT,iDAUGjB,QAVH,CAnBF,CAbF,CAfF,CADF,CAgED,CArFD,C,aAuFeF,a","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n  Modal,\n  StyleSheet,\n  View,\n  TouchableWithoutFeedback,\n  KeyboardAvoidingView,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\ninterface BackDropModalProps {\n  visible?: boolean;\n  fullScreen?: boolean;\n  backdropColor?: string;\n  animationType?: 'fade' | 'slide' | 'none';\n  onClose?: () => void | undefined;\n  children?: React.ReactNode;\n}\n\nconst BackDropModal: React.FC<BackDropModalProps> = ({\n  onClose,\n  children,\n  animationType,\n  visible = false,\n  fullScreen = false,\n  backdropColor = 'transparent',\n}) => {\n  const [modalVisible, setModalVisible] = useState<boolean>(visible);\n  useEffect(() => {\n    return () => onClose && onClose();\n  }, []);\n\n  useEffect(() => {\n    if (visible === true) setModalVisible(true);\n    else if (backdropColor === 'transparent') setModalVisible(visible);\n    else\n      setTimeout(() => {\n        setModalVisible(visible);\n      }, 200);\n  }, [visible]);\n  return (\n    <Modal\n      transparent\n      supportedOrientations={[\n        'landscape',\n        'landscape-left',\n        'landscape-right',\n        'portrait',\n        'portrait-upside-down',\n      ]}\n      animated={true}\n      hardwareAccelerated={true}\n      animationType={animationType}\n      visible={modalVisible}\n      onDismiss={onClose}\n      onRequestClose={onClose}>\n      <View\n        pointerEvents={visible ? 'auto' : 'none'}\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={[StyleSheet.absoluteFill]}>\n        <TouchableWithoutFeedback style={{zIndex: 0}} onPress={onClose}>\n          <View\n            style={{\n              flex: 1,\n              backgroundColor: backdropColor,\n            }}\n          />\n        </TouchableWithoutFeedback>\n        <SafeAreaView\n          style={[\n            fullScreen === true && {\n              backgroundColor: 'white',\n            },\n            {\n              ...StyleSheet.absoluteFillObject,\n              justifyContent: 'center',\n              alignContent: 'center',\n              alignItems: 'center',\n              alignSelf: 'center',\n              flexGrow: 1,\n              flexShrink: 1,\n              // backgroundColor: 'red',\n              zIndex: 999,\n            },\n            fullScreen && {flex: 1, height: '100%'},\n          ]}\n          pointerEvents=\"box-none\">\n          <KeyboardAvoidingView\n            behavior=\"height\"\n            style={[\n              {\n                width: fullScreen ? '100%' : '80%',\n                backgroundColor: 'transparent',\n                justifyContent: 'center',\n                alignSelf: 'center',\n              },\n            ]}>\n            {children}\n          </KeyboardAvoidingView>\n        </SafeAreaView>\n      </View>\n    </Modal>\n  );\n};\n\nexport default BackDropModal;\n"]}