import React, {useState, useEffect} from 'react';

import {
  Image as ImageComp,
  Dimensions,
  ImageSourcePropType,
  ImageStyle,
} from 'react-native';

type ImageCustomPropsBase = {
  source: any;

  style?: ImageStyle;
  width?: number;
  ratio?: '1:1' | '4:3' | '1:1.91';
};
const Image = ({style, source}: ImageCustomPropsBase) => {
  const [{width: phoneWidth, height: phoneHeight}, setPhoneWidth] = useState(
    Dimensions.get('screen'),
  );
  const [defImage, setDefImage] = useState<{width: number; height: number}>({
    width: 1,
    height: 1,
  });
  const [size, setSize] = useState<{width: number; height: number}>({
    width: 1,
    height: 1,
  });
  const widthListener = ({screen}: any) => {
    setPhoneWidth(screen.width);
  };
  const calculateImage: any = () => {
    let ratio = phoneWidth / defImage.width;
    setSize({
      width: phoneWidth,
      height: phoneHeight / ratio,
    });
    console.log({
      width: defImage.width,
      phoneWidth: phoneWidth,
    });
  };
  useEffect(() => {
    Dimensions.addEventListener('change', widthListener);
    ImageComp.getSize(
      source.uri ? source.uri : source,
      (w, h) => {
        setDefImage({...defImage, width: w, height: h});
        calculateImage();
      },
      () => {},
    );
    return () => Dimensions.removeEventListener('change', widthListener);
  }, []);
  useEffect(() => {
    calculateImage();
  }, [phoneWidth]);
  return (
    size.width > 1 && (
      <ImageComp
        source={source}
        style={[style, size, {backgroundColor: 'black'}]}
        resizeMode="cover"
        resizeMethod="auto"
      />
    )
  );
};

export default Image;
