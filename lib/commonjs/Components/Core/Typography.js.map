{"version":3,"sources":["Typography.tsx"],"names":["AnimatedText","Animated","createAnimatedComponent","TextBase","Text","variant","children","style","weight","letterSpacing","theme","gutterBottom","size","contrast","dense","animated","align","transform","color","rest","typography","colors","marginBottom","fontFamily","Platform","select","android","ios","fontSize","fontSizes","PixelRatio","getFontScale","text","alpha","contrasts","toString","fontWeight","fontWeights","letterSpacings","textAlign","textTransform"],"mappings":"mWAAA,oDACA,yCASA,oDACA,gC,yGACA,GAAMA,CAAAA,YAAY,CAAGC,sBAASC,uBAAT,CAAiCC,iBAAjC,CAArB,CAwCA,GAAMC,CAAAA,IAAyB,CAAG,QAA5BA,CAAAA,IAA4B,MAgB5B,uBAfJC,OAeI,CAfJA,OAeI,uBAfM,OAeN,cAdJC,QAcI,MAdJA,QAcI,CAbJC,KAaI,MAbJA,KAaI,CAZJC,MAYI,MAZJA,MAYI,CAXJC,aAWI,MAXJA,aAWI,CAVJC,KAUI,MAVJA,KAUI,CATJC,YASI,MATJA,YASI,CARJC,IAQI,MARJA,IAQI,oBAPJC,QAOI,CAPJA,QAOI,wBAPO,IAOP,+BANJC,KAMI,CANJA,KAMI,qBANI,KAMJ,YALJC,QAKI,MALJA,QAKI,iBAJJC,KAII,CAJJA,KAII,qBAJI,MAIJ,gCAHJC,SAGI,CAHJA,SAGI,yBAHQ,MAGR,gBAFJC,KAEI,MAFJA,KAEI,CADDC,IACC,2MAC8B,sBAAST,KAAT,CAD9B,CACCU,UADD,WACCA,UADD,CACoBC,MADpB,WACaH,KADb,CAGJ,MACE,8BAAC,YAAD,0BACMC,IADN,EAEE,KAAK,CAAE,CACL,CACEG,YAAY,CAAEX,YAAY,EAAI,CADhC,CAEEY,UAAU,CAAEC,sBAASC,MAAT,CAAgB,CAACC,OAAO,CAAE,QAAV,CAAoBC,GAAG,CAAE,QAAzB,CAAhB,CAFd,CAGEC,QAAQ,CACNhB,IAAI,EACJ,CAAC,CAAAQ,UAAU,MAAV,QAAAA,UAAU,CAAES,SAAZ,CAAsBxB,OAAtB,IAAkC,EAAnC,EAAyCyB,wBAAWC,YAAX,EAAzC,EACGjB,KAAK,CAAG,CAAH,CAAO,CADf,CALJ,CAOEI,KAAK,CAAEH,QAAQ,CACXG,KADW,CAEXL,QAAQ,CACR,mBAAMK,KAAK,EAAIG,MAAM,CAACW,IAAtB,EACGC,KADH,CAEI,MAAOpB,CAAAA,QAAP,GAAoB,QAApB,CACIA,QADJ,CAEI,CAAAO,UAAU,MAAV,QAAAA,UAAU,CAAEc,SAAZ,CAAsB7B,OAAtB,IAAkC,CAJ1C,EAMG8B,QANH,EADQ,CAQRjB,KAAK,EAAIG,MAAM,CAACW,IAjBtB,CAkBEI,UAAU,CAAE5B,MAAM,GAAIY,UAAJ,cAAIA,UAAU,CAAEiB,WAAZ,CAAwBhC,OAAxB,CAAJ,CAlBpB,CAmBEI,aAAa,CAAEA,aAAa,GAAIW,UAAJ,cAAIA,UAAU,CAAEkB,cAAZ,CAA2BjC,OAA3B,CAAJ,CAnB9B,CAqBEkC,SAAS,CAAEvB,KArBb,CAsBEwB,aAAa,CAAEvB,SAtBjB,CADK,CAyBLV,KAzBK,CAFT,kDA6BGD,QA7BH,CADF,CAiCD,CApDD,C,aA2GeF,I","sourcesContent":["import React from 'react';\nimport {\n  Text as TextBase,\n  TextProps as TextBaseProps,\n  PixelRatio,\n  Platform,\n  Animated,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport Color from 'color';\nimport {ThemeTypes, useTheme} from 'Theming';\nconst AnimatedText = Animated.createAnimatedComponent(TextBase);\nexport type TextProps = TextBaseProps & {\n  weight?:\n    | '100'\n    | '200'\n    | '300'\n    | '400'\n    | '500'\n    | '600'\n    | '700'\n    | '800'\n    | '900'\n    | 'bold';\n  size?: number;\n  variant?:\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6'\n    | 'subtitle1'\n    | 'subtitle2'\n    | 'body1'\n    | 'body2'\n    | 'caption'\n    | 'button'\n    | 'overline';\n  color?: Animated.Value | 'primary' | 'secondary' | string;\n  contrast?: number | boolean;\n  dense?: boolean;\n  animated?: boolean;\n  gutterBottom?: number;\n  letterSpacing?: number;\n  style?: StyleProp<TextStyle>;\n  children?: any;\n  align?: 'center' | 'left' | 'right' | 'justify';\n  transform?: 'uppercase' | 'lowercase' | 'capitalize' | 'none';\n  theme?: any;\n};\nconst Text: React.FC<TextProps> = ({\n  variant = 'body1',\n  children,\n  style,\n  weight,\n  letterSpacing,\n  theme,\n  gutterBottom,\n  size,\n  contrast = true,\n  dense = false,\n  animated,\n  align = 'left',\n  transform = 'none',\n  color,\n  ...rest\n}) => {\n  let {typography, color: colors} = useTheme(theme);\n  // const themes = theme?.typography;\n  return (\n    <AnimatedText\n      {...rest}\n      style={[\n        {\n          marginBottom: gutterBottom || 0,\n          fontFamily: Platform.select({android: 'Roboto', ios: 'System'}),\n          fontSize:\n            size ||\n            (typography?.fontSizes[variant] || 14) / PixelRatio.getFontScale() -\n              (dense ? 2 : 0),\n          color: animated\n            ? color\n            : contrast\n            ? Color(color || colors.text)\n                .alpha(\n                  typeof contrast === 'number'\n                    ? contrast\n                    : typography?.contrasts[variant] || 0,\n                )\n                .toString()\n            : color || colors.text,\n          fontWeight: weight || typography?.fontWeights[variant],\n          letterSpacing: letterSpacing || typography?.letterSpacings[variant],\n          // lineHeight: lineHeights[variant],\n          textAlign: align,\n          textTransform: transform,\n        },\n        style,\n      ]}>\n      {children}\n    </AnimatedText>\n  );\n};\n\n// class Typography extends React.PureComponent<TextProps> {\n//   render() {\n//     const {\n//       variant = 'body1',\n//       children,\n//       style,\n//       weight,\n//       letterSpacing,\n//       theme,\n//       gutterBottom,\n//       fontSize,\n//       contrast = true,\n//       dense = false,\n//       align = 'left',\n//       transform = 'none',\n//       color = '#000000',\n//       ...rest\n//     } = this.props;\n//     const themes = theme?.typography;\n//     return (\n//       <AnimatedText\n//         {...rest}\n//         style={[\n//           {\n//             marginBottom: gutterBottom || 0,\n//             fontFamily: Platform.select({android: 'Roboto', ios: 'System'}),\n//             fontSize:\n//               fontSize ||\n//               (themes?.fontSizes[variant] || 14) / PixelRatio.getFontScale() -\n//                 (dense ? 2 : 0),\n//             color: contrast\n//               ? Color(color)\n//                   .alpha(\n//                     typeof contrast === 'number'\n//                       ? contrast\n//                       : themes?.contrasts[variant] || 0,\n//                   )\n//                   .toString()\n//               : color,\n//             fontWeight: weight || themes?.fontWeights[variant],\n//             letterSpacing: letterSpacing || themes?.letterSpacings[variant],\n//             // lineHeight: lineHeights[variant],\n//             textAlign: align,\n//             textTransform: transform,\n//           },\n//           style,\n//         ]}>\n//         {children}\n//       </AnimatedText>\n//     );\n//   }\n// }\n\nexport default Text;\n"]}